"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI (OpenAI API)
"""
import os
from openai import OpenAI

class AIHelper:
    def __init__(self):
        self.client = OpenAI()
    
    async def generate_tarot_reading(self, question: str, reading_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –¢–∞—Ä–æ"""
        prompts = {
            "day": f"–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –°–¥–µ–ª–∞–π –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞. –í–æ–ø—Ä–æ—Å: {question}. –ò—Å–ø–æ–ª—å–∑—É–π 3 –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ, –æ–ø–∏—à–∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –¥–∞–π —Å–æ–≤–µ—Ç. –ü–∏—à–∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∏ –∑–∞–≥–∞–¥–æ—á–Ω–æ, –Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ. –ú–∞–∫—Å–∏–º—É–º 300 —Å–ª–æ–≤.",
            "love": f"–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –°–¥–µ–ª–∞–π –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–≤—å. –í–æ–ø—Ä–æ—Å: {question}. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ 5 –∫–∞—Ä—Ç –¢–∞—Ä–æ, –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é –≤ –ª—é–±–≤–∏ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–∏—à–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ –∏ –∑–∞–≥–∞–¥–æ—á–Ω–æ. –ú–∞–∫—Å–∏–º—É–º 400 —Å–ª–æ–≤.",
            "career": f"–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –°–¥–µ–ª–∞–π –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—å–µ—Ä—É –∏ —Ñ–∏–Ω–∞–Ω—Å—ã. –í–æ–ø—Ä–æ—Å: {question}. –ò—Å–ø–æ–ª—å–∑—É–π 4 –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ, –æ–ø–∏—à–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã. –ú–∞–∫—Å–∏–º—É–º 350 —Å–ª–æ–≤.",
            "general": f"–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –°–¥–µ–ª–∞–π –æ–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ. –í–æ–ø—Ä–æ—Å: {question}. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ 7 –∫–∞—Ä—Ç –¢–∞—Ä–æ, –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç. –ú–∞–∫—Å–∏–º—É–º 500 —Å–ª–æ–≤."
        }
        
        prompt = prompts.get(reading_type, prompts["general"])
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4.1-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–∞—Ä–æ–ª–æ–≥ —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –¢–≤–æ–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ —Ç–æ—á–Ω—ã –∏ –ø–æ–º–æ–≥–∞—é—Ç –ª—é–¥—è–º."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.9,
                max_tokens=600
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"–ö–∞—Ä—Ç—ã —Å–µ–≥–æ–¥–Ω—è –º–æ–ª—á–∞—Ç... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. (–û—à–∏–±–∫–∞: {str(e)})"
    
    async def generate_horoscope(self, zodiac_sign: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ –¥–µ–Ω—å"""
        prompt = f"–°–æ–∑–¥–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ {zodiac_sign}. –ù–∞–ø–∏—à–∏ –æ –ª—é–±–≤–∏, –∫–∞—Ä—å–µ—Ä–µ, –∑–¥–æ—Ä–æ–≤—å–µ –∏ –æ–±—â–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º. –ú–∞–∫—Å–∏–º—É–º 200 —Å–ª–æ–≤."
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4.1-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç —Ç–æ—á–Ω—ã–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.8,
                max_tokens=300
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"–ó–≤—ë–∑–¥—ã —Å–µ–≥–æ–¥–Ω—è —Å–∫—Ä—ã—Ç—ã –æ–±–ª–∞–∫–∞–º–∏... (–û—à–∏–±–∫–∞: {str(e)})"
    
    async def generate_meme_idea(self, description: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∏ –¥–ª—è –º–µ–º–∞"""
        prompt = f"–°–æ–∑–¥–∞–π —Å–º–µ—à–Ω—É—é –∏–¥–µ—é –¥–ª—è –º–µ–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è: {description}. –û–ø–∏—à–∏, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ, –∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É. –ú–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ —Å–º–µ—à–Ω—ã–º. –ú–∞–∫—Å–∏–º—É–º 150 —Å–ª–æ–≤."
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4.1-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –º–µ–º–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –≤–∏—Ä—É—Å–Ω—ã–µ –º–µ–º—ã –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏."},
                    {"role": "user", "content": prompt}
                ],
                temperature=1.0,
                max_tokens=200
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"–ö—Ä–µ–∞—Ç–∏–≤ —Å–ª–æ–º–∞–ª—Å—è... (–û—à–∏–±–∫–∞: {str(e)})"
    
    async def generate_meme_text(self, description: str) -> dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–µ–º–∞ (–≤–µ—Ä—Ö –∏ –Ω–∏–∑)"""
        prompt = f"–°–æ–∑–¥–∞–π —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞. –û–ø–∏—Å–∞–Ω–∏–µ: {description}. –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {{\"top\": \"—Ç–µ–∫—Å—Ç —Å–≤–µ—Ä—Ö—É\", \"bottom\": \"—Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É\"}}. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º, —Å–º–µ—à–Ω—ã–º –∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4.1-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã —Å–æ–∑–¥–∞—ë—à—å —Ç–µ–∫—Å—Ç—ã –¥–ª—è –º–µ–º–æ–≤. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."},
                    {"role": "user", "content": prompt}
                ],
                temperature=1.0,
                max_tokens=100,
                response_format={"type": "json_object"}
            )
            import json
            return json.loads(response.choices[0].message.content)
        except Exception as e:
            return {"top": "–ö–û–ì–î–ê –ß–¢–û-–¢–û", "bottom": "–ü–û–®–õ–û –ù–ï –¢–ê–ö"}
    
    async def moderate_content(self, text: str) -> dict:
        """–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å"""
        try:
            response = self.client.moderations.create(input=text)
            result = response.results[0]
            return {
                "is_safe": not result.flagged,
                "categories": result.categories.model_dump() if result.flagged else {}
            }
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º
            return {"is_safe": True, "categories": {}}
    
    async def generate_marketing_comment(self, post_text: str, bot_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞"""
        prompt = f"–ü–æ—Å—Ç: '{post_text}'. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ —É–ø–æ–º—è–Ω–µ—à—å –±–æ—Ç–∞ @{bot_name}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∞ –Ω–µ –∫–∞–∫ —Ä–µ–∫–ª–∞–º–∞."
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4.1-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∏—Ç—Å—è –ø–æ–ª–µ–∑–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.9,
                max_tokens=100
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"–ü–æ–ø—Ä–æ–±—É–π @{bot_name}, –º–Ω–µ –ø–æ–º–æ–≥! üëç"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AI –ø–æ–º–æ—â–Ω–∏–∫–∞
ai = AIHelper()

