"""
–ü–†–û–ï–ö–¢ 2: AI –¢–∞—Ä–æ & –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è
Telegram-–±–æ—Ç –¥–ª—è –≥–∞–¥–∞–Ω–∏–π
"""
import sys
sys.path.append('/home/ubuntu/triple-telegram-empire')

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from shared.database.db import db
from shared.utils.ai_helper import ai
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
PROJECT_NAME = "tarot"

ZODIAC_SIGNS = {
    "‚ôà –û–≤–µ–Ω": "aries",
    "‚ôâ –¢–µ–ª–µ—Ü": "taurus",
    "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã": "gemini",
    "‚ôã –†–∞–∫": "cancer",
    "‚ôå –õ–µ–≤": "leo",
    "‚ôç –î–µ–≤–∞": "virgo",
    "‚ôé –í–µ—Å—ã": "libra",
    "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω": "scorpio",
    "‚ôê –°—Ç—Ä–µ–ª–µ—Ü": "sagittarius",
    "‚ôë –ö–æ–∑–µ—Ä–æ–≥": "capricorn",
    "‚ôí –í–æ–¥–æ–ª–µ–π": "aquarius",
    "‚ôì –†—ã–±—ã": "pisces"
}

class TarotBot:
    def __init__(self):
        self.app = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("stats", self.stats))
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        db.add_user(user.id, user.username, user.first_name)
        
        text = f"üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
        text += "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–µ —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—Ç –¢–∞—Ä–æ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.\n\n"
        text += "‚ú® –ß—Ç–æ —è —É–º–µ—é:\n"
        text += "üÉè –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ –¢–∞—Ä–æ\n"
        text += "‚≠ê –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø\n"
        text += "üíï –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–≤—å\n"
        text += "üíº –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—å–µ—Ä—É\n\n"
        text += "üéÅ –ü–µ—Ä–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ –ë–ï–°–ü–õ–ê–¢–ù–û!"
        
        keyboard = [
            [InlineKeyboardButton("üÉè –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ –¢–∞—Ä–æ", callback_data="tarot_menu")],
            [InlineKeyboardButton("‚≠ê –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å", callback_data="horoscope_menu")],
            [InlineKeyboardButton("üíé VIP –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="vip_info")]
        ]
        
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "tarot_menu":
            await self.show_tarot_menu(query, context)
        elif data == "horoscope_menu":
            await self.show_horoscope_menu(query, context)
        elif data == "vip_info":
            await self.show_vip_info(query, context)
        elif data.startswith("tarot_"):
            reading_type = data.split("_")[1]
            await self.start_tarot_reading(query, context, reading_type)
        elif data.startswith("zodiac_"):
            sign = data.split("_", 1)[1]
            await self.generate_horoscope(query, context, sign)
        elif data.startswith("pay_"):
            await self.process_payment(query, context, data)
    
    async def show_tarot_menu(self, query, context):
        """–ú–µ–Ω—é –≥–∞–¥–∞–Ω–∏–π –Ω–∞ –¢–∞—Ä–æ"""
        text = "üÉè –ì–ê–î–ê–ù–ò–ï –ù–ê –¢–ê–†–û\n\n"
        text += "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –≥–∞–¥–∞–Ω–∏—è:\n\n"
        text += "üåÖ –ù–∞ –¥–µ–Ω—å - 99‚ÇΩ\n"
        text += "üíï –ù–∞ –ª—é–±–æ–≤—å - 199‚ÇΩ\n"
        text += "üíº –ù–∞ –∫–∞—Ä—å–µ—Ä—É - 199‚ÇΩ\n"
        text += "üîÆ –û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ - 299‚ÇΩ\n\n"
        text += "üéÅ –ü–µ—Ä–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ –ë–ï–°–ü–õ–ê–¢–ù–û!"
        
        keyboard = [
            [InlineKeyboardButton("üåÖ –ù–∞ –¥–µ–Ω—å (99‚ÇΩ)", callback_data="tarot_day")],
            [InlineKeyboardButton("üíï –ù–∞ –ª—é–±–æ–≤—å (199‚ÇΩ)", callback_data="tarot_love")],
            [InlineKeyboardButton("üíº –ù–∞ –∫–∞—Ä—å–µ—Ä—É (199‚ÇΩ)", callback_data="tarot_career")],
            [InlineKeyboardButton("üîÆ –û–±—â–µ–µ (299‚ÇΩ)", callback_data="tarot_general")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_horoscope_menu(self, query, context):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        text = "‚≠ê –ì–û–†–û–°–ö–û–ü –ù–ê –î–ï–ù–¨\n\n"
        text += "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:\n\n"
        text += "üí∞ –¶–µ–Ω–∞: 49‚ÇΩ\n"
        text += "üéÅ –ü–µ—Ä–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –ë–ï–°–ü–õ–ê–¢–ù–û!"
        
        keyboard = []
        signs_list = list(ZODIAC_SIGNS.items())
        for i in range(0, len(signs_list), 3):
            row = []
            for sign_name, sign_code in signs_list[i:i+3]:
                row.append(InlineKeyboardButton(sign_name, callback_data=f"zodiac_{sign_code}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def start_tarot_reading(self, query, context, reading_type):
        """–ù–∞—á–∞—Ç—å –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ –¢–∞—Ä–æ"""
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ
        import sqlite3
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM tarot_readings WHERE user_id = ?', (user_id,))
        count = cursor.fetchone()[0]
        
        is_free = (count == 0)
        
        if is_free:
            text = "üéÅ –≠—Ç–æ —Ç–≤–æ—ë –ø–µ—Ä–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ - –æ–Ω–æ –ë–ï–°–ü–õ–ê–¢–ù–û!\n\n"
        else:
            prices = {"day": 99, "love": 199, "career": 199, "general": 299}
            price = prices.get(reading_type, 99)
            text = f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ\n\n"
            text += "‚ö†Ô∏è –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.\n\n"
        
        text += "‚ùì –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∫–∞—Ä—Ç–∞–º –¢–∞—Ä–æ:\n"
        text += "(–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {
            'action': 'waiting_tarot_question',
            'reading_type': reading_type,
            'is_free': is_free
        }
        
        conn.close()
        await query.edit_message_text(text)
    
    async def generate_horoscope(self, query, context, zodiac_sign):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
        user_id = query.from_user.id
        
        await query.edit_message_text("‚è≥ –ß–∏—Ç–∞—é –∑–≤—ë–∑–¥—ã...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø —Å –ø–æ–º–æ—â—å—é AI
        horoscope = await ai.generate_horoscope(zodiac_sign)
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞
        sign_name = [k for k, v in ZODIAC_SIGNS.items() if v == zodiac_sign][0]
        
        text = f"‚≠ê –ì–û–†–û–°–ö–û–ü –ù–ê –°–ï–ì–û–î–ù–Ø\n"
        text += f"{sign_name}\n\n"
        text += horoscope
        text += "\n\nüí´ –ü—É—Å—Ç—å –∑–≤—ë–∑–¥—ã –±—É–¥—É—Ç –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω—ã –∫ —Ç–µ–±–µ!"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π –∑–Ω–∞–∫", callback_data="horoscope_menu")],
            [InlineKeyboardButton("üÉè –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ –¢–∞—Ä–æ", callback_data="tarot_menu")]
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        import sqlite3
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO tarot_readings (user_id, reading_type, question, result, paid, amount)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, 'horoscope', zodiac_sign, horoscope, False, 0))
        conn.commit()
        conn.close()
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_states:
            state = self.user_states[user_id]
            
            if state['action'] == 'waiting_tarot_question':
                await self.process_tarot_question(update, context, text, state)
                del self.user_states[user_id]
                return
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–∞–¥–∞–Ω–∏–µ! üîÆ")
    
    async def process_tarot_question(self, update, context, question, state):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        reading_type = state['reading_type']
        is_free = state['is_free']
        
        await update.message.reply_text("üÉè –†–∞—Å–∫–ª–∞–¥—ã–≤–∞—é –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–∞–¥–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
        reading = await ai.generate_tarot_reading(question, reading_type)
        
        text = f"üîÆ –ì–ê–î–ê–ù–ò–ï –ù–ê –¢–ê–†–û\n\n"
        text += f"‚ùì –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å: {question}\n\n"
        text += reading
        text += "\n\n‚ú® –ü—É—Å—Ç—å –∫–∞—Ä—Ç—ã —É–∫–∞–∂—É—Ç —Ç–µ–±–µ –≤–µ—Ä–Ω—ã–π –ø—É—Ç—å!"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ï—â—ë –≥–∞–¥–∞–Ω–∏–µ", callback_data="tarot_menu")],
            [InlineKeyboardButton("‚≠ê –ì–æ—Ä–æ—Å–∫–æ–ø", callback_data="horoscope_menu")]
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        import sqlite3
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO tarot_readings (user_id, reading_type, question, result, paid, amount)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, reading_type, question, reading, is_free, 0 if is_free else 99))
        conn.commit()
        
        if not is_free:
            db.update_revenue(PROJECT_NAME, 99)
        
        conn.close()
        
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_vip_info(self, query, context):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP"""
        text = "üíé VIP –ü–û–î–ü–ò–°–ö–ê\n\n"
        text += "–ß—Ç–æ –¥–∞—ë—Ç VIP:\n"
        text += "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è\n"
        text += "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø\n"
        text += "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è\n"
        text += "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        text += "üí∞ –¶–µ–Ω–∞: 999‚ÇΩ/–º–µ—Å—è—Ü\n\n"
        text += "üéÅ –ë–æ–Ω—É—Å: –ü—Ä–∏–≥–ª–∞—Å–∏ 5 –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –º–µ—Å—è—Ü VIP –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å VIP (999‚ÇΩ)", callback_data="pay_vip")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def process_payment(self, query, context, payment_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        text = "üí≥ –û–ü–õ–ê–¢–ê\n\n"
        text += "‚ö†Ô∏è –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞.\n\n"
        text += "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π —Å–º. PAYMENT_SETUP.md"
        
        await query.edit_message_text(text)
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        stats = db.get_project_stats(PROJECT_NAME)
        
        text = f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê\n\n"
        text += f"üí∞ –î–æ—Ö–æ–¥: {stats['revenue']:.2f}‚ÇΩ\n"
        text += f"üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['transactions']}\n"
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        
        await update.message.reply_text(text)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üîÆ –ë–æ—Ç 'AI –¢–∞—Ä–æ' –∑–∞–ø—É—â–µ–Ω!")
        self.app.run_polling()

if __name__ == "__main__":
    bot = TarotBot()
    bot.run()

