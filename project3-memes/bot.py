"""
–ü–†–û–ï–ö–¢ 3: –ú–µ–º—ã –Ω–∞ –∑–∞–∫–∞–∑
Telegram-–±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–º–æ–≤ —Å AI
"""
import sys
sys.path.append('/home/ubuntu/triple-telegram-empire')

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from shared.database.db import db
from shared.utils.ai_helper import ai

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
PROJECT_NAME = "memes"

class MemesBot:
    def __init__(self):
        self.app = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.user_states = {}
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("stats", self.stats))
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        db.add_user(user.id, user.username, user.first_name)
        
        text = f"üòÇ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        text += "–Ø —Å–æ–∑–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ–º—ã —Å –ø–æ–º–æ—â—å—é AI!\n\n"
        text += "üé® –ß—Ç–æ —è —É–º–µ—é:\n"
        text += "‚Ä¢ –ú–µ–º—ã –ø—Ä–æ –¥—Ä—É–∑–µ–π\n"
        text += "‚Ä¢ –ú–µ–º—ã –ø—Ä–æ —Ä–∞–±–æ—Ç—É\n"
        text += "‚Ä¢ –ú–µ–º—ã –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É\n"
        text += "‚Ä¢ –ú–µ–º—ã –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
        text += "üéÅ –ü–µ—Ä–≤—ã–π –º–µ–º –ë–ï–°–ü–õ–ê–¢–ù–û!\n\n"
        text += "üí∞ –¶–µ–Ω—ã:\n"
        text += "‚Ä¢ 1 –º–µ–º - 99‚ÇΩ\n"
        text += "‚Ä¢ 5 –º–µ–º–æ–≤ - 399‚ÇΩ\n"
        text += "‚Ä¢ 10 –º–µ–º–æ–≤ - 699‚ÇΩ\n"
        text += "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –º–µ—Å—è—Ü - 999‚ÇΩ"
        
        keyboard = [
            [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –º–µ–º", callback_data="create_meme")],
            [InlineKeyboardButton("üíé –ë–µ–∑–ª–∏–º–∏—Ç (999‚ÇΩ)", callback_data="unlimited")],
            [InlineKeyboardButton("üìä –ú–æ–∏ –º–µ–º—ã", callback_data="my_memes")]
        ]
        
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "create_meme":
            await self.start_meme_creation(query, context)
        elif data == "unlimited":
            await self.show_unlimited_info(query, context)
        elif data == "my_memes":
            await self.show_my_memes(query, context)
        elif data.startswith("pay_"):
            await self.process_payment(query, context, data)
    
    async def start_meme_creation(self, query, context):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞"""
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–µ–º
        import sqlite3
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM meme_orders WHERE user_id = ?', (user_id,))
        count = cursor.fetchone()[0]
        conn.close()
        
        is_free = (count == 0)
        
        if is_free:
            text = "üéÅ –¢–≤–æ–π –ø–µ—Ä–≤—ã–π –º–µ–º –ë–ï–°–ü–õ–ê–¢–ù–û!\n\n"
        else:
            text = "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 99‚ÇΩ\n\n"
        
        text += "üìù –û–ø–∏—à–∏, –∫–∞–∫–æ–π –º–µ–º —Ç—ã —Ö–æ—á–µ—à—å:\n\n"
        text += "–ü—Ä–∏–º–µ—Ä—ã:\n"
        text += "‚Ä¢ –ú–µ–º –ø—Ä–æ –º–æ–µ–≥–æ –¥—Ä—É–≥–∞ –í–∞—Å—é, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç\n"
        text += "‚Ä¢ –ú–µ–º –ø—Ä–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —Ä–∞–±–æ—Ç—É\n"
        text += "‚Ä¢ –ú–µ–º –ø—Ä–æ –∫–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∫—Ä–∞–ª —Å–æ—Å–∏—Å–∫—É\n\n"
        text += "–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:"
        
        self.user_states[user_id] = {
            'action': 'waiting_meme_description',
            'is_free': is_free
        }
        
        await query.edit_message_text(text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if user_id in self.user_states:
            state = self.user_states[user_id]
            
            if state['action'] == 'waiting_meme_description':
                await self.generate_meme(update, context, text, state)
                del self.user_states[user_id]
                return
        
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –º–µ–º! üòÇ")
    
    async def generate_meme(self, update, context, description, state):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–º–∞"""
        user_id = update.effective_user.id
        is_free = state['is_free']
        
        await update.message.reply_text("üé® –°–æ–∑–¥–∞—é –º–µ–º...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ—é –º–µ–º–∞ —Å –ø–æ–º–æ—â—å—é AI
        meme_idea = await ai.generate_meme_idea(description)
        meme_text = await ai.generate_meme_text(description)
        
        text = f"üòÇ –¢–í–û–ô –ú–ï–ú –ì–û–¢–û–í!\n\n"
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        text += f"üé® –ò–¥–µ—è –º–µ–º–∞:\n{meme_idea}\n\n"
        text += f"üìÑ –¢–µ–∫—Å—Ç –º–µ–º–∞:\n"
        text += f"–°–≤–µ—Ä—Ö—É: {meme_text.get('top', '')}\n"
        text += f"–°–Ω–∏–∑—É: {meme_text.get('bottom', '')}\n\n"
        text += "‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –º–µ–º–∞.\n"
        text += "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å DALL-E API.\n\n"
        text += "üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: IMAGE_GENERATION_SETUP.md"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π –º–µ–º", callback_data="create_meme")],
            [InlineKeyboardButton("üíé –ë–µ–∑–ª–∏–º–∏—Ç", callback_data="unlimited")]
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        import sqlite3
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO meme_orders (user_id, description, meme_url, paid, amount)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, description, "demo_meme.jpg", is_free, 0 if is_free else 99))
        conn.commit()
        
        if not is_free:
            db.update_revenue(PROJECT_NAME, 99)
        
        conn.close()
        
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_my_memes(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–µ–º—ã"""
        user_id = query.from_user.id
        
        import sqlite3
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT description, created_at
            FROM meme_orders
            WHERE user_id = ?
            ORDER BY created_at DESC
            LIMIT 10
        ''', (user_id,))
        memes = cursor.fetchall()
        conn.close()
        
        if not memes:
            text = "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –º–µ–º–æ–≤.\n\n–°–æ–∑–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
            keyboard = [[InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –º–µ–º", callback_data="create_meme")]]
        else:
            text = f"üòÇ –¢–í–û–ò –ú–ï–ú–´ ({len(memes)}):\n\n"
            for i, (desc, created_at) in enumerate(memes, 1):
                short_desc = desc[:50] + "..." if len(desc) > 50 else desc
                text += f"{i}. {short_desc}\n"
            
            keyboard = [
                [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –µ—â—ë", callback_data="create_meme")],
                [InlineKeyboardButton("üíé –ë–µ–∑–ª–∏–º–∏—Ç", callback_data="unlimited")]
            ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def show_unlimited_info(self, query, context):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–ª–∏–º–∏—Ç–µ"""
        text = "üíé –ë–ï–ó–õ–ò–ú–ò–¢–ù–ê–Ø –ü–û–î–ü–ò–°–ö–ê\n\n"
        text += "–ß—Ç–æ –¥–∞—ë—Ç –±–µ–∑–ª–∏–º–∏—Ç:\n"
        text += "‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–º–æ–≤\n"
        text += "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n"
        text += "‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã\n"
        text += "‚úÖ –ë–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤\n\n"
        text += "üí∞ –¶–µ–Ω–∞: 999‚ÇΩ/–º–µ—Å—è—Ü\n\n"
        text += "üéÅ –ë–æ–Ω—É—Å: –ü—Ä–∏–≥–ª–∞—Å–∏ 3 –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç (999‚ÇΩ)", callback_data="pay_unlimited")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def process_payment(self, query, context, payment_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        text = "üí≥ –û–ü–õ–ê–¢–ê\n\n"
        text += "‚ö†Ô∏è –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞.\n\n"
        text += "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π —Å–º. PAYMENT_SETUP.md"
        
        await query.edit_message_text(text)
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        stats = db.get_project_stats(PROJECT_NAME)
        
        text = f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê\n\n"
        text += f"üí∞ –î–æ—Ö–æ–¥: {stats['revenue']:.2f}‚ÇΩ\n"
        text += f"üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['transactions']}\n"
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        
        await update.message.reply_text(text)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üòÇ –ë–æ—Ç '–ú–µ–º—ã –Ω–∞ –∑–∞–∫–∞–∑' –∑–∞–ø—É—â–µ–Ω!")
        self.app.run_polling()

if __name__ == "__main__":
    bot = MemesBot()
    bot.run()

