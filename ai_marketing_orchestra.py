"""
AI Marketing Orchestra - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ë–ï–ó —É—á–∞—Å—Ç–∏—è –¥—Ä—É–∑–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
"""
import asyncio
import random
from datetime import datetime
from openai import OpenAI

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ (API –∫–ª—é—á —É–∂–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
client = OpenAI()

class AIMarketingOrchestra:
    """–û—Ä–∫–µ—Å—Ç—Ä AI-–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.model = "gpt-4.1-mini"
        
    async def content_creator_agent(self, project_type):
        """–ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        prompts = {
            'confessions': """–°–æ–∑–¥–∞–π 5 –≤–∏—Ä—É—Å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –±–æ—Ç–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–Ω–∏–π –≤ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–º Telegram.
            –ü–æ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã:
            - –ë—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            - –í—ã–∑—ã–≤–∞—Ç—å –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ
            - –°–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏
            - –ë—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            - –ù–µ –±—ã—Ç—å —Å–ø–∞–º–æ–º
            
            –§–æ—Ä–º–∞—Ç: –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏.""",
            
            'tarot': """–°–æ–∑–¥–∞–π 5 –≤–∏—Ä—É—Å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è AI-–±–æ—Ç–∞ –≥–∞–¥–∞–Ω–∏–π –Ω–∞ –¢–∞—Ä–æ –≤ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–º Telegram.
            –ü–æ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã:
            - –ë—ã—Ç—å –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–º–∏
            - –°–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏
            - –ë—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏
            - –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            
            –§–æ—Ä–º–∞—Ç: –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏.""",
            
            'memes': """–°–æ–∑–¥–∞–π 5 –≤–∏—Ä—É—Å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è AI-–±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–æ–≤ –≤ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–º Telegram.
            –ü–æ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã:
            - –ë—ã—Ç—å —Å–º–µ—à–Ω—ã–º–∏
            - –°–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏
            - –ë—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏
            - –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            
            –§–æ—Ä–º–∞—Ç: –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏."""
        }
        
        try:
            response = client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∏—Ä—É—Å–Ω–æ–º—É –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –≤ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–º Telegram."},
                    {"role": "user", "content": prompts[project_type]}
                ],
                temperature=0.9
            )
            
            content = response.choices[0].message.content
            posts = [p.strip() for p in content.split('\n') if p.strip() and not p.strip().startswith('#')]
            return posts[:5]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return []
    
    async def channel_finder_agent(self):
        """–ê–≥–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø"""
        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø (–ø—É–±–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        channels = {
            'confessions': [
                '@ru_confessions',
                '@anonymous_chat_ru',
                '@secrets_ru',
                '@priznania_ru',
                '@confession_room'
            ],
            'tarot': [
                '@tarot_ru',
                '@astrology_ru',
                '@magic_ru',
                '@gadanie_ru',
                '@ezoterika_ru'
            ],
            'memes': [
                '@memes_ru',
                '@humor_ru',
                '@jokes_ru',
                '@fun_ru',
                '@lol_ru'
            ]
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        try:
            response = client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ Telegram."},
                    {"role": "user", "content": """–ü—Ä–µ–¥–ª–æ–∂–∏ 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø –≤ Telegram 
                    –ø–æ —Ç–µ–º–∞–º: –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è, –≥–∞–¥–∞–Ω–∏—è, –º–µ–º—ã. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–æ–ª—å–∫–æ —Å–ª–æ–≤–∞, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""}
                ],
                temperature=0.7
            )
            
            keywords = response.choices[0].message.content.split('\n')
            keywords = [k.strip('- ').strip() for k in keywords if k.strip()]
            
            return {
                'channels': channels,
                'search_keywords': keywords[:10]
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return {'channels': channels, 'search_keywords': []}
    
    async def engagement_agent(self, post_content):
        """–ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–≤–ª–µ–∫–∞—é—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        try:
            response = client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ, –Ω–µ —Å–ø–∞–º–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è Telegram."},
                    {"role": "user", "content": f"""–°–æ–∑–¥–∞–π 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∫ –ø–æ—Å—Ç—É: "{post_content}"
                    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã:
                    - –ë—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
                    - –ù–µ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ —Ä–µ–∫–ª–∞–º–∞
                    - –í—ã–∑—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å
                    - –ë—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                    
                    –§–æ—Ä–º–∞—Ç: –∫–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."""}
                ],
                temperature=0.8
            )
            
            comments = response.choices[0].message.content.split('\n')
            return [c.strip() for c in comments if c.strip()][:3]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            return []
    
    async def viral_strategy_agent(self):
        """–ê–≥–µ–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–∏—Ä—É—Å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            response = client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∏—Ä—É—Å–Ω–æ–º—É –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –±–µ–∑ –±—é–¥–∂–µ—Ç–∞."},
                    {"role": "user", "content": """–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è Telegram-–±–æ—Ç–æ–≤ –ë–ï–ó –±—é–¥–∂–µ—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
                    –£—á—Ç–∏:
                    - –ù–µ—Ç –¥—Ä—É–∑–µ–π –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
                    - –ù–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —Ä–µ–∫–ª–∞–º—É
                    - –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
                    - –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
                    
                    –î–∞–π 5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ö—Ä–∞—Ç–∫–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º."""}
                ],
                temperature=0.7
            )
            
            strategy = response.choices[0].message.content
            return strategy
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
    
    async def timing_optimizer_agent(self):
        """–ê–≥–µ–Ω—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        optimal_times = {
            'morning': '09:00-11:00',
            'lunch': '13:00-14:00',
            'evening': '18:00-21:00',
            'night': '22:00-23:00'
        }
        
        current_hour = datetime.now().hour
        
        if 9 <= current_hour < 11:
            return 'morning', '–£—Ç—Ä–æ - —Ö–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
        elif 13 <= current_hour < 14:
            return 'lunch', '–û–±–µ–¥ - –≤—Ä–µ–º—è –¥–ª—è –ª—ë–≥–∫–æ–≥–æ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
        elif 18 <= current_hour < 21:
            return 'evening', '–í–µ—á–µ—Ä - –õ–£–ß–®–ï–ï –≤—Ä–µ–º—è –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
        elif 22 <= current_hour < 24:
            return 'night', '–ù–æ—á—å - –≤—Ä–µ–º—è –¥–ª—è –∏–Ω—Ç–∏–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø—Ä–∏–∑–Ω–∞–Ω–∏—è, –≥–∞–¥–∞–Ω–∏—è)'
        else:
            return 'other', '–ù–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –ª—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å'
    
    async def run_daily_campaign(self):
        """–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ AI Marketing Orchestra...")
        print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
        
        # 1. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
        time_slot, time_advice = await self.timing_optimizer_agent()
        print(f"‚è∞ –í—Ä–µ–º—è: {time_slot}")
        print(f"üí° –°–æ–≤–µ—Ç: {time_advice}\n")
        
        # 2. –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –¥–µ–Ω—å
        print("üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
        strategy = await self.viral_strategy_agent()
        print(strategy)
        print()
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        projects = ['confessions', 'tarot', 'memes']
        all_content = {}
        
        for project in projects:
            print(f"\n{'='*60}")
            print(f"üì± –ü—Ä–æ–µ–∫—Ç: {project.upper()}")
            print(f"{'='*60}\n")
            
            # –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            posts = await self.content_creator_agent(project)
            all_content[project] = posts
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤:\n")
            for i, post in enumerate(posts, 1):
                print(f"{i}. {post}\n")
            
            # –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞
            if posts:
                comments = await self.engagement_agent(posts[0])
                print(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è:\n")
                for i, comment in enumerate(comments, 1):
                    print(f"   {i}. {comment}")
            
            print()
        
        # 4. –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤
        print(f"\n{'='*60}")
        print("üîç –¶–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞")
        print(f"{'='*60}\n")
        
        channels_data = await self.channel_finder_agent()
        
        print("üì¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
        for project, channels in channels_data['channels'].items():
            print(f"\n{project.upper()}:")
            for channel in channels:
                print(f"  ‚Ä¢ {channel}")
        
        print(f"\nüîé –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:")
        for keyword in channels_data['search_keywords']:
            print(f"  ‚Ä¢ {keyword}")
        
        # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await self.save_campaign_results(all_content, channels_data, strategy)
        
        print(f"\n{'='*60}")
        print("‚úÖ –ö–∞–º–ø–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"{'='*60}\n")
        
        return all_content, channels_data, strategy
    
    async def save_campaign_results(self, content, channels, strategy):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–º–ø–∞–Ω–∏–∏"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"/home/ubuntu/Telegram-Bot-/marketing_campaign_{timestamp}.md"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"# –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n")
            
            f.write("## –°—Ç—Ä–∞—Ç–µ–≥–∏—è\n\n")
            f.write(f"{strategy}\n\n")
            
            f.write("## –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n")
            for project, posts in content.items():
                f.write(f"### {project.upper()}\n\n")
                for i, post in enumerate(posts, 1):
                    f.write(f"{i}. {post}\n\n")
            
            f.write("## –¶–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã\n\n")
            for project, channels_list in channels['channels'].items():
                f.write(f"### {project.upper()}\n\n")
                for channel in channels_list:
                    f.write(f"- {channel}\n")
                f.write("\n")
            
            f.write("## –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞\n\n")
            for keyword in channels['search_keywords']:
                f.write(f"- {keyword}\n")
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    orchestra = AIMarketingOrchestra()
    
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë           ü§ñ AI MARKETING ORCHESTRA ü§ñ                       ‚ïë
‚ïë                                                              ‚ïë
‚ïë     –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ë–ï–ó –±—é–¥–∂–µ—Ç–∞      ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    await orchestra.run_daily_campaign()
    
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë  üìã –ß–¢–û –î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï:                                       ‚ïë
‚ïë                                                              ‚ïë
‚ïë  1. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤                   ‚ïë
‚ïë  2. –ù–∞–π–¥–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ Telegram                        ‚ïë
‚ïë  3. –ü—É–±–ª–∏–∫—É–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è                     ‚ïë
‚ïë  4. –ó–∞–ø—É—Å–∫–∞–π —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å                         ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üí° –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π cron:              ‚ïë
‚ïë     crontab -e                                               ‚ïë
‚ïë     0 9,13,18 * * * python3 ai_marketing_orchestra.py        ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

if __name__ == "__main__":
    asyncio.run(main())

