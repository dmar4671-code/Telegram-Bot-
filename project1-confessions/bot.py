"""
–ü–†–û–ï–ö–¢ 1: –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ü—Ä–∏–∑–Ω–∞–Ω–∏—è 2.0
Telegram-–±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import sys
sys.path.append('/home/ubuntu/triple-telegram-empire')

import logging
import random
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from shared.database.db import db
from shared.utils.ai_helper import ai
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
PROJECT_NAME = "confessions"

class ConfessionsBot:
    def __init__(self):
        self.app = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("mybox", self.my_box))
        self.app.add_handler(CommandHandler("stats", self.stats))
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    def generate_box_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∫–æ—Ä–æ–±–∫–∏"""
        return ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        args = context.args
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        referrer_id = int(args[0]) if args and args[0].isdigit() else None
        db.add_user(user.id, user.username, user.first_name, referrer_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ä–æ–±–∫–∞
        conn = db.conn if hasattr(db, 'conn') else None
        import sqlite3
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT box_code, messages_count FROM confession_boxes WHERE user_id = ?', (user.id,))
        box = cursor.fetchone()
        
        if box:
            box_code, messages_count = box
            text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n\n"
            text += f"üì¶ –¢–≤–æ—è –∫–æ—Ä–æ–±–∫–∞ –ø—Ä–∏–∑–Ω–∞–Ω–∏–π: `{box_code}`\n"
            text += f"üíå –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n\n"
            text += f"üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–∑–µ–π:\nhttps://t.me/{context.bot.username}?start={box_code}"
        else:
            text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            text += "üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–Ω–∏–π!\n\n"
            text += "–ó–¥–µ—Å—å —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ:\n"
            text += "‚Ä¢ –ü—Ä–∏–∑–Ω–∞–Ω–∏—è –≤ –ª—é–±–≤–∏ üíï\n"
            text += "‚Ä¢ –ß–µ—Å—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ üí≠\n"
            text += "‚Ä¢ –°–µ–∫—Ä–µ—Ç—ã –∏ —Ç–∞–π–Ω—ã ü§´\n\n"
            text += "–°–æ–∑–¥–∞–π —Å–≤–æ—é –∫–æ—Ä–æ–±–∫—É –ø—Ä–∏–∑–Ω–∞–Ω–∏–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
        
        keyboard = [
            [InlineKeyboardButton("üéÅ –°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ–±–∫—É", callback_data="create_box")],
            [InlineKeyboardButton("üì¨ –ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="my_messages")],
            [InlineKeyboardButton("üíé VIP —Å—Ç–∞—Ç—É—Å", callback_data="vip_info")]
        ]
        
        conn.close()
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    async def my_box(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–æ–±–∫–µ"""
        user_id = update.effective_user.id
        
        import sqlite3
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT box_code, messages_count, is_vip, vip_until 
            FROM confession_boxes 
            WHERE user_id = ?
        ''', (user_id,))
        box = cursor.fetchone()
        
        if not box:
            await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∫–æ—Ä–æ–±–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å!")
            conn.close()
            return
        
        box_code, messages_count, is_vip, vip_until = box
        
        text = f"üì¶ –¢–≤–æ—è –∫–æ—Ä–æ–±–∫–∞ –ø—Ä–∏–∑–Ω–∞–Ω–∏–π\n\n"
        text += f"üîë –ö–æ–¥: `{box_code}`\n"
        text += f"üíå –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
        
        if is_vip and vip_until:
            vip_date = datetime.fromisoformat(vip_until)
            if vip_date > datetime.now():
                text += f"üíé VIP –¥–æ: {vip_date.strftime('%d.%m.%Y')}\n"
            else:
                text += f"‚≠ê VIP –∏—Å—Ç—ë–∫\n"
        
        text += f"\nüîó –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π:\nhttps://t.me/{context.bot.username}?start={box_code}\n\n"
        text += "–ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π —É–≤–∏–¥—è—Ç —Å—Å—ã–ª–∫—É, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–π –ø–æ–ª—É—á–∏—à—å! üî•"
        
        keyboard = [
            [InlineKeyboardButton("üì¨ –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="read_messages")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="box_stats")]
        ]
        
        conn.close()
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "create_box":
            await self.create_box(query, context)
        elif data == "my_messages":
            await self.show_messages(query, context)
        elif data == "vip_info":
            await self.show_vip_info(query, context)
        elif data.startswith("read_msg_"):
            message_id = int(data.split("_")[2])
            await self.read_message(query, context, message_id)
        elif data.startswith("pay_"):
            await self.process_payment(query, context, data)
    
    async def create_box(self, query, context):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ—Ä–æ–±–∫–∏"""
        user_id = query.from_user.id
        
        import sqlite3
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ—Ä–æ–±–∫–∞
        cursor.execute('SELECT box_code FROM confession_boxes WHERE user_id = ?', (user_id,))
        existing = cursor.fetchone()
        
        if existing:
            await query.edit_message_text("‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫–æ—Ä–æ–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π /mybox")
            conn.close()
            return
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–æ—Ä–æ–±–∫—É
        box_code = self.generate_box_code()
        cursor.execute('''
            INSERT INTO confession_boxes (user_id, box_code)
            VALUES (?, ?)
        ''', (user_id, box_code))
        conn.commit()
        conn.close()
        
        text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–≤–æ—è –∫–æ—Ä–æ–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        text += f"üîë –ö–æ–¥ –∫–æ—Ä–æ–±–∫–∏: `{box_code}`\n\n"
        text += f"üîó –ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏:\nhttps://t.me/{context.bot.username}?start={box_code}\n\n"
        text += "–û–Ω–∏ —Å–º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! ü§´\n\n"
        text += "üí° –°–æ–≤–µ—Ç: –†–∞–∑–º–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –≤ Instagram Stories, VK –∏–ª–∏ Telegram —Å—Ç–∞—Ç—É—Å–µ!"
        
        keyboard = [
            [InlineKeyboardButton("üì¨ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="my_messages")],
            [InlineKeyboardButton("üíé –°—Ç–∞—Ç—å VIP", callback_data="vip_info")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    async def show_messages(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = query.from_user.id
        
        import sqlite3
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT id, is_vip FROM confession_boxes WHERE user_id = ?', (user_id,))
        box = cursor.fetchone()
        
        if not box:
            await query.edit_message_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ä–æ–±–∫–∏. –°–æ–∑–¥–∞–π –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /start")
            conn.close()
            return
        
        box_id, is_vip = box
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute('''
            SELECT id, message, is_read, created_at
            FROM confessions
            WHERE box_id = ?
            ORDER BY created_at DESC
        ''', (box_id,))
        messages = cursor.fetchall()
        
        if not messages:
            text = "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!"
            await query.edit_message_text(text)
            conn.close()
            return
        
        # –ü–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ
        free_count = 3
        text = f"üíå –£ —Ç–µ–±—è {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π!\n\n"
        
        if is_vip:
            text += "üíé VIP: –ß–∏—Ç–∞–π –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
            for i, msg in enumerate(messages[:10], 1):
                msg_id, message, is_read, created_at = msg
                preview = message[:50] + "..." if len(message) > 50 else message
                text += f"{i}. {preview}\n"
        else:
            text += f"üéÅ –ü–µ—Ä–≤—ã–µ {free_count} —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ:\n\n"
            for i, msg in enumerate(messages[:free_count], 1):
                msg_id, message, is_read, created_at = msg
                text += f"{i}. {message}\n\n"
            
            if len(messages) > free_count:
                text += f"üîí –ï—â—ë {len(messages) - free_count} —Å–æ–æ–±—â–µ–Ω–∏–π —Å–∫—Ä—ã—Ç–æ\n\n"
                text += "üí∞ –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
                text += "‚Ä¢ 49‚ÇΩ - 1 —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                text += "‚Ä¢ 199‚ÇΩ - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                text += "‚Ä¢ 499‚ÇΩ - VIP –Ω–∞ –º–µ—Å—è—Ü (–±–µ–∑–ª–∏–º–∏—Ç)"
        
        keyboard = []
        if not is_vip and len(messages) > free_count:
            keyboard.append([InlineKeyboardButton("üí≥ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ (199‚ÇΩ)", callback_data="pay_all")])
            keyboard.append([InlineKeyboardButton("üíé VIP –Ω–∞ –º–µ—Å—è—Ü (499‚ÇΩ)", callback_data="pay_vip")])
        
        conn.close()
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None)
    
    async def show_vip_info(self, query, context):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP"""
        text = "üíé VIP –°–¢–ê–¢–£–°\n\n"
        text += "–ß—Ç–æ –¥–∞—ë—Ç VIP:\n"
        text += "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        text += "‚úÖ –£–∑–Ω–∞–π, –∫—Ç–æ –Ω–∞–ø–∏—Å–∞–ª (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è)\n"
        text += "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        text += "‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∑–Ω–∞—á–æ–∫ üíé\n\n"
        text += "üí∞ –¶–µ–Ω–∞: 499‚ÇΩ/–º–µ—Å—è—Ü\n\n"
        text += "üéÅ –ë–æ–Ω—É—Å: –ü—Ä–∏–≥–ª–∞—Å–∏ 10 –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ VIP –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å VIP (499‚ÇΩ)", callback_data="pay_vip")],
            [InlineKeyboardButton("üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="referral_info")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def process_payment(self, query, context, payment_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        text = "üí≥ –û–ü–õ–ê–¢–ê\n\n"
        text += "‚ö†Ô∏è –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞.\n\n"
        text += "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω—É–∂–Ω–æ:\n"
        text += "1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram Stars –∏–ª–∏ –ÆKassa\n"
        text += "2. –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á–∏\n"
        text += "3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
        text += "üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ —Ñ–∞–π–ª–µ PAYMENT_SETUP.md"
        
        await query.edit_message_text(text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        moderation = await ai.moderate_content(text)
        if not moderation['is_safe']:
            await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return
        
        await update.message.reply_text("üí¨ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–∞!")
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        stats = db.get_project_stats(PROJECT_NAME)
        
        text = f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê\n\n"
        text += f"üí∞ –î–æ—Ö–æ–¥: {stats['revenue']:.2f}‚ÇΩ\n"
        text += f"üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['transactions']}\n"
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        
        await update.message.reply_text(text)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ë–æ—Ç '–ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ü—Ä–∏–∑–Ω–∞–Ω–∏—è' –∑–∞–ø—É—â–µ–Ω!")
        self.app.run_polling()

if __name__ == "__main__":
    bot = ConfessionsBot()
    bot.run()

